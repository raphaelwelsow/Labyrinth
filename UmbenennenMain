import java.awt.event.KeyEvent;
import ledControl.BoardController;
import ledControl.LedConfiguration;
import ledControl.gui.KeyBuffer;

public class UmbenennenMain {

	public static void main(String[] args) {
		//grÃ¶ÃŸeres Board falls gewÃ¼nscht
		BoardController.getBoardController(.LED_20x20_EMULATOR);
		BoardController controller = BoardController.getBoardController();
		
		//Das Objekt in der anderen Klasse wird erstellt
		EineWeitereKlasse ewk = new EineWeitereKlasse(controller);
		
		//controller.setBoardColor(72,61,127);
		controller.addColor(1, 3, 127,127,127);
		controller.updateBoard();
		// Den Boardcontroller anfordern
		controller = BoardController.getBoardController();
		// Danach den KeyBuffer anfordern
		buffer = controller.getKeyBuffer();
		// Startposition des Punktes festlegen
		xPos = 5;
		yPos = 5;
		
		// In einer Endlosschleife das Programm laufen lassen. Das Programm wird
		// trotzdem beendet, sobald der Benutzer es schliesst.
		// Zwei Dinge werden in der Schleife getan:
		// 1. a) Das letzte KeyEvent wird aus dem Buffer gelesen
		//    b) Es wird geprueft, ob ueberhaupt eine Tastatureingabe vorliegt.
		//    c) Wenn eine Eingabe vorliegt, wird geprueft, ob es sich um ein
		//       KEY_PRESSED-Event handelt, da dieses Programm nur auf das
		//       druecken, nicht auf das loslassen einer Taste reagieren soll.
		//    d) Wenn ein KEY_PRESSED-Event vorliegt, wird geprueft, ob es sich
		//       um eine der vier Pfeiltasten handelt, um dann
		//    e) gegebenenfalls die Position des roten Punktes anzupassen.
		// 2. Das Bild wird neu gezeichnet.
		while (true){
			// 1. a)
			KeyEvent event = buffer.pop();
			// 1. b)
			if (event != null){
				// 1.c)
				if (event.getID() == java.awt.event.KeyEvent.KEY_PRESSED){
					// 1.d)
					switch (event.getKeyCode()){
					case java.awt.event.KeyEvent.VK_UP:
						// der rote Punkt soll bewegt werden. Das darf nur dann
						// geschehen, wenn der Punkt sich dadurch nicht ueber
						// Bildrand hinaus bewegt
						if (yPos > 0){
							// 1.e)
							yPos--;
						}
						break;
					case java.awt.event.KeyEvent.VK_DOWN:
						// Pruefung auf den Bildrand
						if (yPos < 11){
							// 1.e)
							yPos++;
						}
						break;
					case java.awt.event.KeyEvent.VK_LEFT:
						// Pruefung auf den Bildrand
						if (xPos > 0){
							// 1.e)
							xPos--;
						}
						break;
					case java.awt.event.KeyEvent.VK_RIGHT:
						// Pruefung auf den Bildrand
						if (xPos < 11){
							// 1.e)
							xPos++;
						}
						break;
					default:
					}
				}
			}
			
			// 2.
			// Zuruecksetzen des Bildes
			controller.resetColors();
			// Zeichnen des roten Punktes an der gespeicherten Position
			controller.setColor(xPos, yPos, 127, 0, 0);
			// Darstellung des neu gezeichneten Bildes auf dem Board
			controller.updateBoard();

	}

}
